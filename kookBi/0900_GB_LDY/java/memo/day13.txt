컬렉션 프레임워크(Collection Framework)
	많은 데이터들을 쉽고 효과적으로 관리할 수 있는
	표준화된 방법을 제공하는 클래스 및 인터페이스의 집합
	자료구조의 일종

			Collection(I)

		List(I)			Set(I)

구현 클래스		ArrayList		HashSet
		LinkedList		TreeSet
		Vector
-------------------------------------------------------------
ArrayList
	Array는 배열 이라는 뜻이고 List는 원소들의 나열된 묶음이다.
	ArrayList는 배열을 이용해서 원소들을 나열해 묶는 클래스이다.
	컬렉션 클래스들 중 가장 많이 사용되는 클래스이다.

	인덱스를 이용해서 배열 요소에 빠르게 접근 가능하지만
	크기를 늘리기 위해서(요소를 추가할 때) 새로운 배열을 생성하고
	기존의 값들을 옮겨야 하므로 느리다.

	배열은 처음에 몇 칸을 할당할지 고정해야 했지만,
	ArrayList는 값을 넣는 만큼 자동으로 늘어난다.

HashSet
	Hash는 해시값 Set은 집합이라는 뜻이다.
	집합은 중복되는 원소(요소, 값)를 포함할 수 없다.
	저장된 값들에는 인덱스가 없기 때문에 저장 순서가 고정되어 있지 않다.
	값의 포함 여부, 값의 유무 검사 목적이 있다.

	Set은 검색의 목적이 있기 때문에 순서 정보를 관리할 필요가 없다.
	따라서 데이터 크기에 상관없이 검색에 걸리는 시간이 매우 짧다.
	반면 ArrayList는 인덱스를 관리해야 하기 때문에 상대적으로
	시간이 오래 걸린다. 기능적으로 HashSet과 ArrayList로
	구현한 것이 차이가 없다면 HashSet을 이용한다.

	.iterator()
		순서가 없는 Set 타입의 요소에 순서를 부여해서 Iterator로
		만든 후 리턴해주는 메소드이다. 리턴된 Iterator 객체는
		순서가 부여되어 있기 때문에 안에 있는 요소들을 .next()라는
		메소드를 통해서 하나씩 가져올 수 있게된다.

HashMap
	Map 구조는 Key(키)와 Value(값)이 쌍으로 저장되는 형태이다.
	그러므로 검색에 용이하다.
	KEY는 중복이 불가능하며, VALUE는 가능하다.
	KEY는 Set타입이고, VALUE는 Collection 타입이다.
	
	KEY	VALUE		키 <-> 해쉬테이블 <-> 값
ENTRY	fly	날다
ENTRY	walk	걷다
ENTRY	run	뛰다

	.keySet()	Key들만 모여있는 Set
	.values()	Value들만 모여있는 Collection
	.entrySet()	키, 값이 하나의 Entry로 모여있는 Set

컬렉션 사용시 주의할 점
	컬렉션에서는 값들을 비교할 때 요소 타입의 equals() 혹은
	hashCode()로 비교하기 때문에 우리가 만든 클래스에 그것들을
	재정의하지 않는다면 주소값 비교로 같은 값을 찾아올 수가 없게된다.
	따라서 비교하고자 하는 값을 올바르게 비교하도록 equals()를
	재정의해서 사용해야 한다.

빠른 for문(향상된 for문, forEach문)
	
	단순하게 모든 값들을 순회할 때 사용하는 것이 좋다.
	순서가 중요한 경우에는(몇번째에 어떤 값이 있는지 알 필요가 있는 경우)
	기존의 for문을 이용하는것이 좋다.

	for(자료형 변수명 : 반복자){
		변수가 안에 있는 요소들을 하나씩 꺼내오며 반복
	}













