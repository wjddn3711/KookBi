삼항 연산자
	조건식 ? 참이면 오는부분 : 거짓이면 오는부분
	조건식 ? 참일때의 값 : 거짓일때의 값
	삼항연산자는 사용부분 통째로 값
	경우의 수가 단 두가지의 값으로 나올 경우에 사용

제어문
	위에서 아래로만 흐르던 코드의 흐름을 제어하기 위한 문장

	조건문(선택제어문)
		if ~ else if ~ else
		switch ~ case ~ default

	반복문(반복제어문)
		while, do ~ while
		for

조건문
	조건에 따라 경우의 수를 나누기
	흐름을 여러가지로 나누기
	선택지를 주어줄 때
	특정한 상태 물어볼 때(입력한게 3이니? 입력한 비밀번호가 abcd니?)

if문
	if(조건식1){
		조건식1의 연산결과가 true일 때 수행할 문장
		...
	} else if(조건식2){
		조건식 2의 연산결과가 true일 때 수행할 문장
		...
	}
	..
	else{
		위의 조건식들이 모두 false일 때 수행할 문장
		...
	}

	조건식 중 하나가 참이라면 내부 내용을 수행하고 세트를 탈출한다.(아래 내용은 하지 않는다.)
	모든 조건식들이 거짓이라면 else문까지 내려가서 그 내부를 수행한다.
	else if와 else문은 생략이 가능하다.

switch문
	경우의 수가 변수에 담긴 값 등가 비교로 인해 나뉠 때 사용
	변수에 담긴 값에 따라 알맞은 case로 이동하고 문장을 실행한다.(진입점 선택)
	하지만 그 밑에 case가 더 있다면 그 안에있는 문장들도 실행된다.
	따라서 각 케이스들을 나누어 주려면 알맞게 break; 를 사용해야 한다.

	switch(변수){
	case 값1:
		변수에 담긴 값이 값1 일때 수행
		break;
	case 값2:
		변수에 담긴 값이 값2 일때 수행
		break;
	...
	default:
		위의 값들이 아닐 때 수행
	}

기타 제어
	break	: 속해있는 switch문이나 반복문을 탈출한다.
	continue

누적 대입 연산자(복합 대입 연산자, 누적 연산자)
	+= -= /= *=

	int data = 10;
	data = data+5;

	data += 5; (data 공간에 5만큼 더해서 넣어라!)

	String msg = "A";
	msg = msg + "B";	//"AB" (msg += "B" 가능)

	msg = "B"+msg;		//"BA" (msg += "B" 불가능)

증감 연산자
	data += 1	-->	data++;
	data -= 1	-->	data--;

	전위형
		해당 줄부터 적용
		int data = 10;
		System.out.println(++data);	//11
		System.out.println(data);	//11

	후위형
		다음 줄부터 적용
		int data = 10;
		System.out.println(data++);	//10
		System.out.println(data);	//11

반복문
	특정한 코드나 행위를 반복해야 할 때 사용하는 문장

	조건에 의한 반복문
		while, do~while

	횟수에 의한 반복문
		for

while문

	while(조건식){
		조건식이 참일동안 반복할 문장
	}

	조건식 검사 -> 참이라면 내부수행, 거짓이면 탈출
		-> 조건식 재검사 -> 참이라면 내부수행, 거짓이면 탈출
		-> 조건식 재검사 ...

do ~ while문

	while문과 동일하지만 처음 한번은 무조건 실행한다.

	do{
		조건식이 참일동안 반복할 문장
	}while(조건식);

	내부수행 -> 조건식검사 -> 참이라면 내부수행, 거짓이면 탈출
		-> 조건식 재검사 -> 참이라면 내부수행, 거짓이면 탈출
		-> 조건식 재검사 ...

무한반복
	while(true){
		무한반복할 문장
	}

	while문 뒤에 () 안에는 조건식, 즉 boolean 타입의 값이 와야한다.
	따라서 그 안에 true라는 값을 넣을 수 있고, 그 값은 상수로 작성했기
	때문에 변하지 않는다. 따라서 그 while문은 무한정으로 반복하게 된다.
	안에서 특정한 조건을 if문으로 만들어 주고 그 때 break를 통한
	탈출구 하나 이상을 만들어 주어야 한다.











